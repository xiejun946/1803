字符串留白
lstrip()删除开头空白
rstrip()删除末尾空白
strip()删除两端空白
字符串大小写控制
a="zhame bong"
print (a.lower())
print (a.upper())
print (a.title())
字符串的拼接
message="a person who never made a mistake never tried anything new"
famous_person="albert einstein"
print (famous_person+"once said"+message.lower())
print (famous_person+"once said"+message.upper())
print (famous_person+"once said"+message.title()
字符串的制表符\t，换行符\n
a=" zhame\tbong\nxiejun "
print (a.lstrip())
print (a.rstrip())
print (a.strip())


                                                     数字类型
注意，在3/2在python2中为1 ，，在python3中为1.5 
      在3中，for循环缩进2格就行了，在2中2，4格都行
      在3中，for，if循环判断都用4格缩进和json一样，比较好判断
      在3中读出输出是input().在2中是raw_input()
数值运算  + - * / 乘方** %
print ((3+2)*4)          --》20
print ((3+2*4)           --》11
print (0.2+0.1)           --》0.30000000000004   注意结果可能是多位
                                      python注释用#标识                                   
# -*- coding:utf-8 -*-
#向大家问好
print ("hello python people!")


                  方法与函数的区别
    方法                                 函数
  L.append()                               sorted(L) 临时排列
 L.sort() 永久排列                          len(L)
 L.insert()                                list(range(1,6,2))
 L.pop()                                    min(L)
 L.reverse() 永久倒序显示不排列               max(L)
 L.remove()                                 sum(L)
 a.lower()                                  set()去除列表中重复值
 a.upper()                     
 a.title()
 a.items()将dict的kv以列表显示                 enumerate()给列表添加索引，形成又索引值组成的字典      
 a.keys()将dict的k取出列表
 a.values()将dict的v取出列表
 a.split() 将每一个字符串拆分到列表中
 a.count(1) 得出列表a中1出现的次数 
 
 
 
 
 
 
 
 列表解析
 L=[i**3 for i in range(1,11)]

 元组，不能修改，替换不能通过赋值完成，需要通过修改存储元组的变量
 
 
 
 
 
 abs(x)
返回一个数的绝对值。参数可以是一个整数或者一个浮点数。如果参数是一个复数，那么将返回它的模。

all(iterable)
当 iterable 中所有元素都为 True 时（或者 iterable 为空），返回 True 。相当于：



any(iterable)
当 iterable 中有元素为 True 时，则返回 True 。如果当 iterable 为空时，返回 False 。相当于




ascii(object)
就像函数 repr() ， 返回一个输入对象的可打印的字符串，但是在返回字符串中去掉非 ASCII 编码的字符，而这些字符在 repr() 生成的字符串中利用编码加 \x ， \u 或 \U 前缀来表示。这个函数所生成的字符串与 Python2 中的 repr() 函数类似。





bin(x)
将一个整数转化为一个二进制字符串。结果是一个可用的 Python 表达式。如果 x 不是 Python 中的 int 类型，那么需要定义 __index__() 方法使之返回一个整数



bool([x])
将一个值转换为布尔类型，使用标准的真值判断过程。如果 x 为假或者不存在，将返回 False ；否则则返回 True 。 bool 同样是一个类，是 int 的子类， bool 类不能作为其他子类。它仅有的实例是 False 和 True 。


bytearray（[ source [，encoding [，errors ] ] ] ）
返回一个新的字节数组。该bytearray类型是0 <= x <256范围内的可变整数序列。它具有可变序列的大多数常用方法，在可变序列类型中描述，以及该bytes类型具有的大多数方法，请参见字节和字节数组方法。

可选的source参数可用于以几种不同的方式初始化数组：

如果它是一个字符串，您还必须提供编码（和可选的， 错误）参数; bytearray()然后使用将字符串转换为字节str.encode()。
如果它是一个整数，则该数组将具有该大小，并将使用空字节进行初始化。
如果它是符合缓冲区接口的对象，则将使用该对象的只读缓冲区来初始化bytes数组。
如果它是可迭代的，则它必须是范围内的可迭代整数 ，它们用作数组的初始内容。0 <= x < 256
如果没有参数，则会创建一个大小为0的数组。


callable（对象）
True如果object参数显示为可调用 False则返回，否则返回。如果返回true，则调用仍然可能失败，但如果为false，则调用对象将永远不会成功。请注意，类是可调用的（调用类会返回一个新实例）; 如果实例的类有__call__()方法，则它们是可调用的。


chr（i ）
返回表示Unicode codepoint为整数i的字符的字符串 。例如，chr(97)返回字符串'a'。这是相反的ord()。参数的有效范围是0到1,114,111（基数为16的0x10FFFF）。 ValueError如果我超出该范围，我将被提出。

请注意，在窄Unicode版本，结果是长度为2的字符串我大于65535（0xFFFF的十六进制


classmethod（功能）
返回函数的类方法。

类方法接收类作为隐式的第一个参数，就像实例方法接收实例一样。要声明一个类方法，请使用此习语



 complex（[ real [，imag ] ] ）
使用值real + imag * j 创建复数或将字符串或数字转换为复数。如果第一个参数是一个字符串，它将被解释为一个复数，并且必须在没有第二个参数的情况下调用该函数。第二个参数永远不能是字符串。每个参数可以是任何数字类型（包括复数）。如果IMAG被省略，默认为零，并且该函数作为像数字转换功能int() 和float()。如果省略两个参数，则返回0j。

复杂类型在数值类型中描述- int，float，complex



delattr（对象，属性）
这是一个亲戚setattr()。参数是一个对象和一个字符串。该字符串必须是对象属性之一的名称。如果对象允许，该函数将删除命名属性。例如，相当于。delattr(x, 'foobar')del x.foobar


对象是实例，删除对象的某个属性

setattr(对象，属性)
设置对象的属性值
setattr(saizi1,'sides',5)
getattr(saizi1,'sides')
delattr(saizi1,'sides')
hasattr(saizi1,'sides')判断属性是否存在于实例，返回True或者Flase

hex（x ）
将整数转换为十六进制字符串。结果是一个有效的Python表达式。如果x不是Python int对象，则必须定义一个__index__()返回整数的 方法。

注意 要获取float的十六进制字符串表示形式，请使用该 float.hex()方法。


print(hash(1))     返回haxi值
print(id('ss'))   python生成数据在内存中的唯一id
print(hex(2))          转成16进制
print(oct(3))          转成8进制
print(bin(3))          转成2进制

 
input（[ 提示] ）
如果存在prompt参数，则将其写入标准输出而不带尾随换行符。然后该函数从输入中读取一行，将其转换为字符串（剥离尾部换行符），然后返回该行。读取EOF时，EOFError会引发。例：

>>> s  =  输入（' - >' ）
- > Monty Python的飞行马戏团
>>> s 
“Monty Python's Flying Circus”

print(isinstance(3,int))  判断数据类型


print(issubclass(ElectricCar,Car)) 判断前一个类是否后一个类的子类，
print(issubclass(ElectricCar,(Car,Battery)))

print(locals())  返回本地符号表字典

map（功能，可迭代，...... ）
返回一个迭代器，它将函数应用于每个iterable项，从而产生结果。如果传递了其他可迭代参数，则 函数必须采用那么多参数，并且并行地应用于所有迭代的项。使用多个iterables时，迭代器会在最短的iterable耗尽时停止。对于函数输入已经排列成参数元组的情况，请参阅itertools.starmap()。

print(max(3,4,5))   可以使多个参数，也可以是单个元组，列表
print(object())   返回一个无特征对象


x=open('1.txt')  文件必须和模块放在同一级目录下
print(x.read())
file_path=r'C:\python_work\text_files\pi_digits.txt'   使用绝对路劲，
with open(file_path) as file_object:
	contents=file_object.read()
	print(contents.rstrip())




print(math.pow(2,3))   2**3 幂运算
print(property(ligang.num))  返回属性在内存中的属性
reversed（seq ）
返回反向迭代器。 seq必须是一个具有__reversed__()方法或支持序列协议的对象（ __len__()方法和方法以及从中__getitem__()开始的整数参数0）。


round（x [，n ] ）
将浮点值x舍入为小数点后的n位数。如果省略n，则默认为零。代表来 x.__round__(n)。

对于支持的内置类型round()，值被舍入到10的最接近的倍数到幂减去n ; 如果两个倍数相等，则向均匀选择进行舍入（例如，两个 round(0.5)和round(-0.5)都是0，并且round(1.5)是2）。如果使用一个参数调用，则返回值为整数，否则与x的类型相同。
print(round(2.3456,3))  2。346 操作浮点数的小数位

set（[ 可迭代] ）
返回一个新集合，可选择使用可迭代的元素。设置类型在Set Types - set，frozenset中描述。


python3 -m pip install pygame

python调用shell命令


python调用浏览器



python调用数据库


python调用接口



                                   django框架
利用python3 -m venv 11_env
新建一个11_env的虚拟环境
在虚拟环境中安装django1.11
遇到一个问题
python3.71和django1.11的兼容性问题，
1.11只需要python3.6
这时候需要退回python版本，或者升级django，查看官方文档，
django1.1只兼容到2.7和3.6
django2.1兼容3.71


1.11升级到2.1
pip install --upgrade Django==2.1

django模块html中书写缩进用2个html，否则报错提示会有问题，提示是否注册标签

关于请求码问题，
正常get请求时，返回200
请求失败，返回500，为配置文件错误，找不到相关文件
如果注册之类写数据库的操作方式，则用到post方法


学习计划
1学完这本书，
2学习用python写几个运维脚本
3上招聘网上找找spriingboot之类，多学习几个框架



django 错误
django按照packages/projectname/templates/appname/template_name.html 这个目录来寻找html模板
所以templates一定不能错，出错以后修改正确后ctrl+c结束django服务器，再开启就可以了

<form action="{% url 'users:login' %}" method='POST'>
语法错误，href或者action中     users的冒号之后一定不能有空格，否则会报错不是被模板标签

缩进错误
制表符和空格之间不能连用否则会报错缩进不匹配

DJANGo 调用mysql数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django',        #数据库名字
        'USER': 'root',          #账号
        'PASSWORD': '123456',      #密码
        'HOST': '127.0.0.1',    #IP
        'PORT': '3306',                   #端口
    }
}


当你爬取一个 https 的时候会验证一次 SSL 证书 

当目标使用的是自签名的证书时就会报出一个如上错误

解决办法一:使用ssl创建未经验证的上下文，在urlopen中传入上下文参数

import ssl

context = ssl._create_unverified_context()

data= urllib.request.urlopen(url_string,context=context).read()

解决方法二:全局取消证书验证,方法中不用加入context参数

ssl._create_default_https_context = ssl._create_unverified_context

即可正常进行爬取


import ssl
ssl._create_default_https_context = ssl._create_unverified_context
json_url='http://raw.githubusercontent.com/muxuezi/btc/master/btc_close_2017.json'
response=urlopen(json_url)


json.loads与dumps对应
json.dumps是将一个Python数据类型列表进行json格式的编码解析，

示例如下：

>>> import json #导入python 中的json模块
>>> l = [‘iplaypython’,[1,2,3], {‘name’:’xiaoming’}] #创建一个l列表
>>> encoded_json = json.dumps(l) # 将l列表，进行json格式化编码
>>> print repr(l)
>>> print encoded_json #输出结果

这样我们就将一个list列表对象，进行了json格式的编码转换。

 

解码python json格式，可以用这个模块的json.loads()函数的解析方法，
示例如下：

>>> decode_json = json.loads(encoded_json)
>>> print type(decode_json) #查看一下解码后的对象类型
>>> print decode_json #输出结果
将python json格式解码成Python数据风格

 

json.dump和json.dumps很不同，json.dump主要用来json文件读写，和json.load函数配合使用。

json.dump(x,f)，x是对象，f是一个文件对象，这个方法可以将json字符串写入到文本文件中。

import json

data = [{"a":"aaa","b":"bbb","c":[1,2,3,(4,5,6)]},33,'tantengvip',True]
data2 = json.dumps(data)
print(data2)
f = open('./tt.txt','a')
json.dump(data2,f)

这样就生成了一个tt.txt文件，保存了json格式的数据。dumps还提供pritty print，格式化的输出。
 
json.load加载json格式文件   下面是从txt文件中读取了json数据。
f = open('./tt.txt','r')
hehe = json.load(f)
print(hehe)

	
#可视化
my_style=LS('#336676',base_style=LCS)
my_config=pygal.Config()
my_config.x_label_rotation=45
my_config.show_lengend=False
my_config.title_font_size=24
my_config.label_font_size=14
my_config.major_label_size=18
my_config.truncate_label=15
my_config.show_y_guides=False
my_config.width=1000



chart=pygal.Bar(my_config,style=my_style)
chart.title='report for each api'
chart.x_labels=submission_xx
chart.add('',api_comments)
chart.render_to_file('apis.svg')	


pygal中渲染，x轴必须不是数字，y轴自定义字典，必须第一个值为value，写死了
不然y轴无法读取数据



requests模块
#get方法传递参数
r=requests.get('https://api.github.com/events/get',params=dataload)
#post方法传递数据
r = requests.post('http://httpbin.org/post', data=payload)
r=requests.post(url,json=payload)  #非编码数据用json自动编码
files = {'file': open('report.xls', 'rb')}    #二进制读取，多部分编码
r = requests.post(url, files=files)
#禁用重定向发起请求
r=requests.get('http://github.com',allow_redirects=False)
参数
allow_redirects=False
files=files
json=payload
params=dataload
data=payload
timeout=0.001
timeout 仅对连接过程有效，与响应体的下载无关。 timeout 并不是整个下载响应的时间限制，而是如果服务器在 timeout 秒内没有应答，将会引发一个异常
auth=('user', 'pass')


print(r.text[:100])  #文本模式
print(r.encoding)   #答应编码
print(r.content[:100])  #二进制模式



